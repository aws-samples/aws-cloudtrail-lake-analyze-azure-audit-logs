---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  This template will deploy the resources required to crawl an Azure Storage container and ingest all Azure log files
  into CloudTrail Lake. This is done by creating a scheduled Lambda function which downloads all Azure log files and queues
  them for processing. Another Lambda function, triggered by the SQS queue, then downloads log files, parses and 
  transforms Azure Log events, and ingests them to a CloudTrail Lake channel. Any events which were not ingested successfully
  will be sent to an SQS dead-letter queue.
  
  **WARNING** This template creates a Lambda function which will be automatically invoked on a recurring basis, as well
  as other related resources. You will be billed for the AWS resources used if you create a stack from this template.

Parameters:
  CloudTrailEventDataStoreArn:
    Type: String
    Description: '[Optional] Arn of the event data store that will be used to ingest the Azure activity events. If no Arn is provided, a new event data store will be created.'
    Default: ''
  CloudTrailEventRetentionPeriod:
    Type: Number
    Description: Number of days CloudTrail should retain events in the data store. This is ignored if a value is provided for CloudTrailEventDataStoreArn.
    MinValue: 7
    MaxValue: 2557
    Default: 7
  AzureStorageContainerName:
    Type: String
    Description: Name of the Azure Storage container where Azure activity events are stored
  AzureStorageConnectionStringSecret:
    Type: String
    Description: Name of the Secrets Manager secret which contains the Azure Storage connection string

Conditions:
  CreateEventDataStore: !Equals [ !Ref CloudTrailEventDataStoreArn, '' ]

Resources:
  ProcessorLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  ProcessorLambdaExecutionRolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
        PolicyName: 'AzureLogs_Processor_Lambda_Role_Policy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'secretsmanager:GetSecretValue'
              Resource: !Sub 'arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AzureStorageConnectionStringSecret}'
            - Effect: Allow
              Action:
                - 'cloudtrail-data:PutAuditEvents'
              Resource: !GetAtt CTLakeChannel.ChannelArn
            - Effect: Allow
              Action:
                - 'sqs:SendMessage'
              Resource: !GetAtt FailedIngestionEventQueue.Arn
            - Effect: Allow
              Action:
                - 'sqs:ReceiveMessage'
                - 'sqs:DeleteMessage'
                - 'sqs:GetQueueAttributes'
              Resource: !GetAtt LogFilesToProcessQueue.Arn
        Roles:
          - !Ref ProcessorLambdaExecutionRole
  ProcessorLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProcessorLambdaFunction}'
      RetentionInDays: 7
  ProcessorLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ../src/processor-lambda/
      Handler: main.lambda_handler
      Role: !GetAtt ProcessorLambdaExecutionRole.Arn
      Runtime: python3.12
      ReservedConcurrentExecutions: 3
      Timeout: 300
      Environment:
        Variables:
          AZURE_STORAGE_CONNECTION_STRING: !Sub '{{resolve:secretsmanager:${AzureStorageConnectionStringSecret}}}'
          AZURE_STORAGE_CONTAINER_NAME: !Ref AzureStorageContainerName
          CLOUDTRAIL_LAKE_CHANNEL_ARN: !GetAtt CTLakeChannel.ChannelArn
          FAILED_INGESTION_EVENTS_SQS_URL: !Ref FailedIngestionEventQueue
          LOG_FILES_TO_PROCESS_SQS_URL: !Ref LogFilesToProcessQueue
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt LogFilesToProcessQueue.Arn
            BatchSize: 10
  AggregatorLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  AggregatorLambdaExecutionRolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
        PolicyName: 'AzureLogs_Aggregrator_Lambda_Role_Policy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'secretsmanager:GetSecretValue'
              Resource: !Sub 'arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AzureStorageConnectionStringSecret}'
            - Effect: Allow
              Action:
                - 'sqs:SendMessage'
              Resource: !GetAtt LogFilesToProcessQueue.Arn
            - Effect: Allow
              Action:
                - 'dynamodb:GetItem'
                - 'dynamodb:PutItem'
              Resource: !GetAtt ProcessedTimestampTable.Arn
        Roles:
          - !Ref AggregatorLambdaExecutionRole
  AggregatorLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AggregatorLambdaFunction}'
      RetentionInDays: 7
  AggregatorLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ../src/aggregator-lambda/
      Handler: main.lambda_handler
      Role: !GetAtt AggregatorLambdaExecutionRole.Arn
      Runtime: python3.12
      ReservedConcurrentExecutions: 3
      Timeout: 300
      Environment:
        Variables:
          AZURE_STORAGE_CONNECTION_STRING: !Sub '{{resolve:secretsmanager:${AzureStorageConnectionStringSecret}}}'
          AZURE_STORAGE_CONTAINER_NAME: !Ref AzureStorageContainerName
          LOG_FILES_TO_PROCESS_SQS_URL: !Ref LogFilesToProcessQueue
          PROCESSED_TIMESTAMP_TABLE: !Ref ProcessedTimestampTable
  AggregatorLambdaSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 hour)
      State: ENABLED
      Targets:
        - Arn: !GetAtt AggregatorLambdaFunction.Arn
          Id: ScheduledLambdaTrigger
    DependsOn:
      - CTLakeChannel
      - AggregatorLambdaLogGroup
  AggregatorLambdaSchedulePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt AggregatorLambdaFunction.Arn
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt AggregatorLambdaSchedule.Arn
  NewCloudTrailEventDataStore:
    Type: 'AWS::CloudTrail::EventDataStore'
    Condition: CreateEventDataStore
    Properties:
      MultiRegionEnabled: False
      OrganizationEnabled: False
      RetentionPeriod: !Ref CloudTrailEventRetentionPeriod
      AdvancedEventSelectors:
       -
        FieldSelectors:
        - Field: eventCategory
          Equals: [ 'ActivityAuditLog' ]
      TerminationProtectionEnabled: False
  CTLakeChannel:
    Type: 'AWS::CloudTrail::Channel'
    Properties:
      Source: Custom
      Destinations:
        - Type: EVENT_DATA_STORE
          Location: !If [ CreateEventDataStore, !Ref NewCloudTrailEventDataStore, !Ref CloudTrailEventDataStoreArn ]
  FailedIngestionEventQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      FifoQueue: True
      ContentBasedDeduplication: True
  LogFilesToProcessQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      FifoQueue: True
      ContentBasedDeduplication: True
      VisibilityTimeout: 900
  ProcessedTimestampTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
      AttributeDefinitions:
        - AttributeName: service
          AttributeType: S
      KeySchema:
        - AttributeName: service
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

Outputs:
  EventDataStoreId:
    Description: The Id of the CloudTrail Event Data Store which will be used when querying events in CloudTrail Lake.
    Value: !If [ CreateEventDataStore, !Select [ 1, !Split [ '/', !Ref NewCloudTrailEventDataStore ] ], !Select [ 1, !Split [ '/', !Ref CloudTrailEventDataStoreArn ] ] ]
